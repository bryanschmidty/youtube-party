<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= room.name %></title>

    <link rel="stylesheet" href="/styles/room.css">
    <script src="/socket.io/socket.io.js"></script>
    <script src="https://www.youtube.com/iframe_api"></script>
</head>
<body>
    <div id="main-container">
        <div id="left-section" class="side-section">
            <div id="profile-info">
                <!-- Profile information and link to profile page go here -->
            </div>
            <div id="room-list">
                <ul class="nav flex-column">
                    <li class="nav-item">
                        <a class="nav-link" href="/">Dashboard</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/profile">Profile</a>
                    </li>
                </ul>
                <!-- Collapsable/filterable list of rooms go here -->
            </div>
        </div>
        <div id="middle-section">
            <div id="video-container">
                <div id="youtube-player"></div>
            </div>
            <div id="search-and-queue">
                <div id="search">
                    <% if (user) { %>
                        <form id="search-form">
                            <div class="input-group">
                                <input type="text" id="search-input" class="form-control" placeholder="Search" aria-label="Search" aria-describedby="button-addon2">
                                <button class="btn btn-outline-secondary" type="button" id="button-addon2">Search</button>
                            </div>
                        </form>
                        <div id="search-results">
                            <!-- search results go here -->
                        </div>
                    <% } else { %>
                        <p>Sign in to add songs to the queue</p>
                    <% } %>
                </div>
                <div id="video-queue">
                    <!-- Video queue goes here -->
                </div>
            </div>
        </div>
        <div id="right-section" class="side-section">
            <div id="room-info">
                <!-- Room information and list of users in the room go here -->
                <h2><%= room.name %></h2>
                <div class="room-details">
                    <% if (room.private) { %>
                        <p>Private</p>
                    <% } %>
                    <% if (room.allow_anon) { %>
                        <p>Allow Anonymous</p>
                    <% } %>
                    <% if (user && user.id === room.host_id && room.invite_code) { %>
                        <p>Invite code: <%= room.invite_code %></p>
                    <% } %>
                </div>
            </div>
            <div id="chat">
                <div id="chat-log">
                    <!-- chat messages go here -->
                </div>
                <div id="chat-form">
                    <% if (user) { %>
                        <form id="message-form">
                            <div class="input-group">
                                <input type="text" id="message-input" class="form-control" placeholder="Type your message here" aria-label="Type your message here" aria-describedby="button-addon2">
                                <button class="btn btn-outline-secondary" type="submit" id="button-addon2">Send</button>
                            </div>
                        </form>
                    <% } else { %>
                        <p>Sign in to interact with the chat</p>
                    <% } %>
                </div>
            </div>
        </div>
    </div>

    <script>
        const socket = io();
        const roomId = <%= room.id %>;
        const userId = <%= user ? user.id : 0 %>;
        const messageInput = document.getElementById('message-input');
        const messageForm = document.getElementById('message-form');
        const chatLog = document.getElementById('chat-log');
        let player;
        let currentState;

        function onYouTubeIframeAPIReady() {
            player = new YT.Player('youtube-player', {
                height: '360',
                width: '640',
                events: {
                    'onStateChange': onPlayerStateChange
                }
            });
        }
        function onPlayerStateChange(event) {
            const time = player.getCurrentTime();
            let state;
            switch (event.data) {
                case YT.PlayerState.PLAYING:
                    state = 'play';
                    break;
                case YT.PlayerState.PAUSED:
                    state = 'pause';
                    break;
                case YT.PlayerState.ENDED:
                    state = 'end';
                    playNextVideo();
                    break;
            }
            if (!state) return;
            if (state == currentState) return;
            currentState = state;
            socket.emit('player-state-change', roomId, userId, state, time);
        }

        function playNextVideo() {
            if (videoQueue.length > 0) {
                const nextVideoId = videoQueue.shift();
                player.loadVideoById(nextVideoId);
                socket.emit('remove-from-queue', roomId, userId, nextVideoId);
            }
        }

        async function searchVideos(query) {
            const response = await fetch(`/search?q=${query}`);
            const data = await response.json();
            const searchResults = document.getElementById('search-results');
            searchResults.innerHTML = '';

            data.items.forEach(item => {
                const videoElement = document.createElement('div');
                videoElement.innerHTML = `<img src="${item.snippet.thumbnails.default.url}" alt="Thumbnail"><br>${item.snippet.title}<br>${item.snippet.channelTitle}<br><button onclick="addToQueue('${item.id.videoId}', '${item.snippet.thumbnails.default.url}', '${item.snippet.title}')">Add to queue</button>`;
                searchResults.append(videoElement);
            });
        }

        async function addToQueue(videoId, thumbnail, title) {
            if (!player.getVideoData().video_id) {
                player.loadVideoById(videoId);
            }

            socket.emit('add-to-queue', roomId, userId, videoId, title, thumbnail);

            // Save the video in the database and update the video queue.
        }


        function debounce(func, wait) {
            let timeout;
            return function (...args) {
                const context = this;
                clearTimeout(timeout);
                timeout = setTimeout(() => func.apply(context, args), wait);
            };
        }

        document.getElementById('search-input').addEventListener('input', debounce((event) => {
            const query = event.target.value;
            if (query) searchVideos(query);
        }, 300));

        // Send chat message
        if (messageForm) {
            messageForm.addEventListener('submit', (event) => {
                event.preventDefault();
                const message = messageInput.value;
                const googleId = '<%= user ? user.google_id : 0 %>';
                socket.emit('chat-message', roomId, googleId, message);
                messageInput.value = '';
            });
        }

        // Get previous chat messages
        fetch(`/room/<%= room.uuid %>/messages`)
            .then(response => response.json())
            .then(messages => {
                messages.forEach(message => {
                    const messageElement = document.createElement('div');
                    messageElement.innerHTML = `${message.name}: ${message.message}`;
                    chatLog.append(messageElement);
                });
            });

        // Web Sockets
        socket.emit('join-room', roomId);
        socket.on('chat-message', (message) => {
            const messageElement = document.createElement('div');
            messageElement.innerHTML = `${message.name}: ${message.message}`;
            chatLog.append(messageElement);
        });
        socket.on('player-state-change', (state) => {
            if (state.userId == userId) {
                return;
            }
            switch (state.state) {
                case 'play':
                    player.seekTo(state.time);
                    player.playVideo();
                    break;
                case 'pause':
                    player.seekTo(state.time);
                    player.pauseVideo();
                    break;
                case 'end':
                    player.seekTo(state.time);
                    player.stopVideo();
                    break;
            }
        });
        socket.on('update-queue', (updatedQueue) => {
            videoQueue = updatedQueue;
            const queueElement = document.getElementById('video-queue');
            queueElement.innerHTML = '';

            videoQueue.forEach(video => {
                const videoElement = document.createElement('div');
                videoElement.innerHTML = `<img src="${video.thumbnail}" alt="Thumbnail"><br>${video.title}`;
                queueElement.append(videoElement);
            });
        });

    </script>
</body>
</html>
